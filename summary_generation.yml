---
- name: Check device versions and compare with target
  hosts: all
  gather_facts: no
  vars:
    input_dict: "{{ input_dict }}"
    output_results: []
  tasks:
    - name: Gather device facts
      ios_facts:
        gather_subset:
          - hardware
          - version

    - name: Set current version and model
      set_fact:
        current_version: "{{ ansible_net_version }}"
        current_model: "{{ ansible_net_model }}"

    - name: Initialize result dictionary
      set_fact:
        result_dict: {}

    - name: Iterate over input dictionary and set result_dict
      set_fact:
        result_dict: >-
          {{
            result_dict | combine({
              inventory_hostname: result_dict[inventory_hostname] | default([]) + [{
                'hostname': inventory_hostname,
                'device_ip': ansible_host,
                'current_version': current_version,
                'target_version': item.target_version,
                'model': current_model,
                'target_version_satisfied': (current_version is version(item.target_version, '>=')),
                'target_ios': item.target_ios,
                'target_ios_md5': item.target_ios_md5,
                'target_image_presence': False,
                'md5_checksum_success': False
              }]
            })
          }}
      loop: "{{ input_dict }}"
      when: current_model | regex_search('^' + item.model)

    - name: Check if target image is present
      ios_command:
        commands:
          - dir flash:
      register: dir_output

    - name: Update image presence status in result_dict
      set_fact:
        result_dict: >-
          {{
            result_dict | combine({
              inventory_hostname: result_dict[inventory_hostname] | default([]) | map('combine', [{
                'target_image_presence': (item.target_ios in dir_output.stdout)
              }]) | list
            })
          }}
      loop: "{{ result_dict[inventory_hostname] }}"
      when: item.target_ios in dir_output.stdout

    - name: Check if target image MD5 checksum matches
      ios_command:
        commands:
          - verify /md5 flash:{{ item.target_ios }} {{ item.target_ios_md5 }}
      register: md5_output
      when: item.target_ios in dir_output.stdout
      loop: "{{ result_dict[inventory_hostname] }}"

    - name: Update MD5 checksum status in result_dict
      set_fact:
        result_dict: >-
          {{
            result_dict | combine({
              inventory_hostname: result_dict[inventory_hostname] | default([]) | map('combine', [{
                'md5_checksum_success': ('OK' in md5_output.stdout)
              }]) | list
            })
          }}
      loop: "{{ result_dict[inventory_hostname] }}"
      when: item.target_ios in dir_output.stdout

    - name: Save results to JSON file
      copy:
        content: "{{ result_dict | to_json }}"
        dest: /tmp/device_versions.json
      delegate_to: localhost
      run_once: true

    - name: Generate CSV from JSON file
      generate_csv:
        input_json_file: /tmp/device_versions.json
        output_csv_file: /tmp/device_versions.csv
      delegate_to: localhost
      run_once: true
