---
- name: Check device versions and compare with target
  hosts: all
  gather_facts: no
  vars:
    input_dict: "{{ input_dict }}"
  tasks:
    - name: Gather device facts
      ios_facts:
        gather_subset:
          - hardware
          - version

    - name: Set current version and model
      set_fact:
        current_version: "{{ ansible_net_version }}"
        current_model: "{{ ansible_net_model }}"

    - name: Iterate over input dictionary and set facts for each host
      set_fact:
        target_version: "{{ item.target_version }}"
        target_ios: "{{ item.target_ios }}"
        target_ios_md5: "{{ item.target_ios_md5 }}"
        target_version_satisfied: "{{ current_version is version(item.target_version, '>=') }}"
        target_image_presence: false
        md5_checksum_success: false
      loop: "{{ input_dict }}"
      when: current_model | regex_search('^' + item.model)

    - name: Check if target image is present
      ios_command:
        commands:
          - dir flash:
      register: dir_output

    - name: Update image presence status
      set_fact:
        target_image_presence: "{{ target_ios in dir_output.stdout }}"
      when: target_ios in dir_output.stdout

    - name: Check if target image MD5 checksum matches
      ios_command:
        commands:
          - verify /md5 flash:{{ target_ios }} {{ target_ios_md5 }}
      register: md5_output
      when: target_ios in dir_output.stdout

    - name: Update MD5 checksum status
      set_fact:
        md5_checksum_success: "{{ 'OK' in md5_output.stdout }}"
      when: target_ios in dir_output.stdout

    - name: Save results to JSON file on the controller
      local_action:
        module: copy
        content: "{{ hostvars[inventory_hostname] | to_json }}"
        dest: "/tmp/device_versions_{{ inventory_hostname }}.json"
      delegate_to: localhost

- name: Gather results from all hosts and generate CSV
  hosts: localhost
  tasks:
    - name: Find all JSON files
      find:
        paths: /tmp
        patterns: "device_versions_*.json"
      register: json_files

    - name: Load host results
      set_fact:
        host_results: "{{ host_results|default({}) | combine({ item.path: lookup('file', item.path)|from_json }) }}"
      loop: "{{ json_files.files }}"

    - name: Generate CSV from host results
      template:
        src: generate_csv.j2
        dest: /tmp/device_versions.csv
